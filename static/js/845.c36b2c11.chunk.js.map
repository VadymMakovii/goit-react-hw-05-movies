{"version":3,"file":"static/js/845.c36b2c11.chunk.js","mappings":"mSAEaA,EAAOC,EAAAA,GAAAA,IAAH,8DAEH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGFC,EAAQJ,EAAAA,GAAAA,IAAH,gFAMLK,EAAOL,EAAAA,GAAAA,GAAH,0CACL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGAG,EAAYN,EAAAA,GAAAA,EAAH,0CACV,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SCdAI,EAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACtC,OACE,SAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,UACE,UAACb,EAAD,YACE,SAACK,EAAD,CAAOS,IAAKL,EAAOM,IAAKL,KACxB,SAACJ,EAAD,UAAOI,KACP,SAACH,EAAD,+BAA0BI,SAIjC,ECZYK,EAAOf,EAAAA,GAAAA,GAAH,8JAGR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACF,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,SC8Cb,EA7CiB,WACf,IAAQa,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KA4BA,OA1BAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,gHAE2BC,EAAAA,EAAAA,IAAgBR,GAF3C,OAEUS,EAFV,OAIUC,EAAUD,EAASE,KAAKC,KAC5B,gBAAGC,EAAH,EAAGA,GAAIpB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWoB,EAAxB,EAAwBA,aAAxB,MAA4C,CAC1CD,GAAAA,EACApB,KAAAA,EACAC,UAAAA,EACAF,MAAOsB,EAAY,0CACoBA,GACnC,4DANN,IASFV,EAAQM,GAdZ,gDAgBIK,EAAAA,GAAAA,MAAA,UAAe,KAAMC,UAhBzB,yBAkBIV,GAAa,GAlBjB,6EAFc,sBACdA,GAAa,GADC,mCAuBdW,EACD,GAAE,CAACjB,KAGF,UAACL,EAAA,EAAD,CAAKuB,GAAI,EAAT,UACGf,IACC,SAACJ,EAAD,UACGI,EAAKS,KAAI,gBAAGC,EAAH,EAAGA,GAAIpB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWF,EAAxB,EAAwBA,MAAxB,OACR,SAACD,EAAD,CAAmBC,MAAOA,EAAOC,KAAMA,EAAMC,UAAWA,GAAzCmB,EADP,MAKbR,IAAc,SAAC,KAAD,MAGpB,C","sources":["components/CastItem/CastItem.styled.jsx","components/CastItem/CastItem.jsx","components/CastList/CastList.styled.jsx","components/CastList/CastList.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: grid;\n  grid-gap: ${p => p.theme.space[3]}px;\n`;\n\nexport const Photo = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n`;\n\nexport const Name = styled.h3`\n  margin: ${p => p.theme.space[0]}px;\n`;\n\nexport const Character = styled.p`\n  margin: ${p => p.theme.space[0]}px;\n`;\n","import { Box } from 'components/Box/Box';\nimport PropTypes from 'prop-types';\nimport {Card, Photo, Name, Character} from './CastItem.styled'\n\nexport const CastItem = ({ photo, name, character }) => {\n  return (\n    <Box as=\"li\">\n      <Card>\n        <Photo src={photo} alt={name} />\n        <Name>{name}</Name>\n        <Character>{`Character: ${character}`}</Character>\n      </Card>\n    </Box>\n  );\n};\n\nCastItem.propTypes = {\n  photo: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: ${p => p.theme.space[4]}px;\n  list-style: none;\n  padding: ${p => p.theme.space[0]}px;\n  margin: ${p => p.theme.space[0]}px;\n`;\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from '../../services/movie-api';\nimport { CastItem } from 'components/CastItem/CastItem';\nimport { List } from './CastList.styled';\nimport { CastLoader } from 'components/Loader/Loader';\nimport { Box } from 'components/Box/Box';\n\nconst CastList = () => {\n  const { movieId } = useParams();\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    async function fetchInfo() {\n      try {\n        const response = await getMovieCredits(movieId);\n\n        const results = response.cast.map(\n          ({ id, name, character, profile_path }) => ({\n            id,\n            name,\n            character,\n            photo: profile_path\n              ? `https://image.tmdb.org/t/p/w300/${profile_path}`\n              : 'https://stuki-druki.com/biofoto4/alexey-arestovich-01.jpg',\n          })\n        );\n        setData(results);\n      } catch (error) {\n        toast.error(`${error.massage}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchInfo();\n  }, [movieId]);\n\n  return (\n    <Box pl={4}>\n      {data && (\n        <List>\n          {data.map(({ id, name, character, photo }) => (\n            <CastItem key={id} photo={photo} name={name} character={character} />\n          ))}\n        </List>\n      )}\n      {isLoading && (<CastLoader />)}\n    </Box>\n  );\n};\n\nexport default CastList;\n\n"],"names":["Card","styled","p","theme","space","Photo","Name","Character","CastItem","photo","name","character","Box","as","src","alt","List","movieId","useParams","useState","data","setData","isLoading","setIsLoading","useEffect","getMovieCredits","response","results","cast","map","id","profile_path","toast","massage","fetchInfo","pl"],"sourceRoot":""}